// twiml-con-server.js

/**
 *SUMMARY:
 * - This TwiML server handles Twilio's POST webhook to /conference-join.
 * - It joins the caller (AI, customer, or agent) to a shared conference room.
 * - If the caller is unmuted (muted=false), we also start media streaming to the AI WebSocket.
 * 
 *Run with:
 *   node twiml-con-server.js
 *   ensure ngrok running, 3000 port
 */

const express = require('express');
const app = express();
const port = 3000; // change if needed

// Parse URL-encoded bodies sent by Twilio
app.use(express.urlencoded({ extended: false }));

// POST endpoint for joining a conference
app.post('/conference-join', (req, res) => {
  console.log('üìû Incoming call for conference join');

//(dont change, helps with muting issues)
const muted = req.query.muted === 'true' ? 'true' : 'false';
  const conferenceName = 'zeus_sales_demo';

  // Update with your actual ngrok / deployed WebSocket server URL
  const mediaStreamURL = 'wss://1904bfa53d74.ngrok-free.app/media';

  // Build TwiML
  let responseXml = `
    <Response>
      <Say>Connecting you now. Please hold.</Say>`;

  // If muted = false (AI or customer), include streaming
  if (muted === 'false') {
    responseXml += `
      <Start>
        <Stream url="${mediaStreamURL}" />
      </Start>`;
  }

  responseXml += `
      <Dial>
        <Conference 
          muted="${muted}" 
          startConferenceOnEnter="true" 
          endConferenceOnExit="false"
        >
          ${conferenceName}
        </Conference>
      </Dial>
    </Response>`;

  // Send XML
  res.set('Content-Type', 'text/xml');
  res.send(responseXml);
});

/**
 *TwiML Behavior
 * - <Say>: Optional message
 * - <Start><Stream>: Only added for unmuted participants (AI or customer)
 * - <Conference>:
 *    - muted=true: Listener only (e.g., agent)
 *    - muted=false: Talker + listener (e.g., AI or customer)
 */

app.listen(port, () => {
  console.log(`üéß TwiML Conference server running at http://localhost:${port}`);
});


/* summary of how it works

You make a call using conferenceCall.js, or Twilio receives an inbound call.

Twilio hits your twiml-con-server.js at /conference-join.

The server responds with TwiML instructions to:

Say ‚ÄúConnecting you now...‚Äù

Begin streaming the call audio to your WebSocket server.

Add the caller to the zeus_sales_demo conference room.

The caller joins unmuted, meaning they can speak and hear others.

All participants (AI, agent, customer) join the same conference room, unmuted, and can talk in real-time.

The AI receives audio through the WebSocket stream and can process and respond live.

*/
